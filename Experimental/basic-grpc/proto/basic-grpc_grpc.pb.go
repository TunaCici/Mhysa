// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: basic-grpc.proto

package basicgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeneralInfo_GetWeather_FullMethodName = "/basicgrpc.GeneralInfo/GetWeather"
	GeneralInfo_GetStock_FullMethodName   = "/basicgrpc.GeneralInfo/GetStock"
)

// GeneralInfoClient is the client API for GeneralInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneralInfoClient interface {
	GetWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherReply, error)
	GetStock(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StockReply], error)
}

type generalInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralInfoClient(cc grpc.ClientConnInterface) GeneralInfoClient {
	return &generalInfoClient{cc}
}

func (c *generalInfoClient) GetWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeatherReply)
	err := c.cc.Invoke(ctx, GeneralInfo_GetWeather_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalInfoClient) GetStock(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StockReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GeneralInfo_ServiceDesc.Streams[0], GeneralInfo_GetStock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StockRequest, StockReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GeneralInfo_GetStockClient = grpc.ServerStreamingClient[StockReply]

// GeneralInfoServer is the server API for GeneralInfo service.
// All implementations must embed UnimplementedGeneralInfoServer
// for forward compatibility.
type GeneralInfoServer interface {
	GetWeather(context.Context, *WeatherRequest) (*WeatherReply, error)
	GetStock(*StockRequest, grpc.ServerStreamingServer[StockReply]) error
	mustEmbedUnimplementedGeneralInfoServer()
}

// UnimplementedGeneralInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeneralInfoServer struct{}

func (UnimplementedGeneralInfoServer) GetWeather(context.Context, *WeatherRequest) (*WeatherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeather not implemented")
}
func (UnimplementedGeneralInfoServer) GetStock(*StockRequest, grpc.ServerStreamingServer[StockReply]) error {
	return status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}
func (UnimplementedGeneralInfoServer) mustEmbedUnimplementedGeneralInfoServer() {}
func (UnimplementedGeneralInfoServer) testEmbeddedByValue()                     {}

// UnsafeGeneralInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralInfoServer will
// result in compilation errors.
type UnsafeGeneralInfoServer interface {
	mustEmbedUnimplementedGeneralInfoServer()
}

func RegisterGeneralInfoServer(s grpc.ServiceRegistrar, srv GeneralInfoServer) {
	// If the following call pancis, it indicates UnimplementedGeneralInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeneralInfo_ServiceDesc, srv)
}

func _GeneralInfo_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralInfoServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneralInfo_GetWeather_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralInfoServer).GetWeather(ctx, req.(*WeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralInfo_GetStock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeneralInfoServer).GetStock(m, &grpc.GenericServerStream[StockRequest, StockReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GeneralInfo_GetStockServer = grpc.ServerStreamingServer[StockReply]

// GeneralInfo_ServiceDesc is the grpc.ServiceDesc for GeneralInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneralInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basicgrpc.GeneralInfo",
	HandlerType: (*GeneralInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeather",
			Handler:    _GeneralInfo_GetWeather_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStock",
			Handler:       _GeneralInfo_GetStock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "basic-grpc.proto",
}
